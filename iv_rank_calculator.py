#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
IV RANK CALCULATOR - IV Rank –∏ IV Percentile
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ —Ç–µ–∫—É—â–∞—è IV –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
"""

import sqlite3
import json
import os
from datetime import datetime, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class IVRankCalculator:
    def __init__(self):
        self.oi_db = './data/unlimited_oi.db'
        self.volatility_dir = './data/volatility/'
        self.output_dir = './data/iv_rank/'
        os.makedirs(self.output_dir, exist_ok=True)
    
    def get_current_iv(self, asset):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é IV –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ volatility"""
        try:
            if not os.path.exists(self.volatility_dir):
                return None
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å volatility –¥–∞–Ω–Ω—ã–º–∏
            files = [f for f in os.listdir(self.volatility_dir) if f.endswith('.json')]
            if not files:
                return None
            
            latest_file = max(files)
            with open(os.path.join(self.volatility_dir, latest_file), 'r') as f:
                data = json.load(f)
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤—É
            for item in data.get('assets', []):
                if item.get('asset') == asset:
                    return item.get('realized_vol')
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π IV –¥–ª—è {asset}: {e}")
            return None
    
    def get_historical_iv(self, asset, days=252):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é IV –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            history = []
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã volatility –∑–∞ –ø–µ—Ä–∏–æ–¥
            cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y%m%d')
            
            if not os.path.exists(self.volatility_dir):
                return []
            
            files = [f for f in os.listdir(self.volatility_dir) 
                    if f.endswith('.json') and f.split('_')[1] >= cutoff_date]
            
            for file in files:
                try:
                    with open(os.path.join(self.volatility_dir, file), 'r') as f:
                        data = json.load(f)
                    
                    for item in data.get('assets', []):
                        if item.get('asset') == asset:
                            iv = item.get('realized_vol')
                            if iv:
                                history.append(iv)
                except:
                    continue
            
            return history
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ IV –¥–ª—è {asset}: {e}")
            return []
    
    def calculate_iv_rank(self, asset):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å IV Rank –∏ IV Percentile"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é IV
            current_iv = self.get_current_iv(asset)
            if current_iv is None:
                logger.warning(f"‚ö†Ô∏è {asset}: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π IV")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history_52w = self.get_historical_iv(asset, days=252)  # 52 –Ω–µ–¥–µ–ª–∏
            history_30d = self.get_historical_iv(asset, days=30)   # 30 –¥–Ω–µ–π
            
            if not history_52w:
                logger.warning(f"‚ö†Ô∏è {asset}: –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ IV")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º IV Rank (52 –Ω–µ–¥–µ–ª–∏)
            iv_min = min(history_52w)
            iv_max = max(history_52w)
            
            if iv_max == iv_min:
                iv_rank = 50
            else:
                iv_rank = ((current_iv - iv_min) / (iv_max - iv_min)) * 100
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º IV Percentile (52 –Ω–µ–¥–µ–ª–∏)
            below_current = len([iv for iv in history_52w if iv < current_iv])
            iv_percentile = (below_current / len(history_52w)) * 100
            
            # –°—Ä–µ–¥–Ω—è—è IV –∑–∞ 30 –¥–Ω–µ–π
            avg_iv_30d = sum(history_30d) / len(history_30d) if history_30d else current_iv
            
            result = {
                'asset': asset,
                'timestamp': datetime.now().isoformat(),
                'current_iv': round(current_iv, 2),
                'iv_rank_52w': round(iv_rank, 1),
                'iv_percentile_52w': round(iv_percentile, 1),
                'iv_min_52w': round(iv_min, 2),
                'iv_max_52w': round(iv_max, 2),
                'avg_iv_30d': round(avg_iv_30d, 2),
                'interpretation': self._interpret_iv_rank(iv_rank, iv_percentile)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self._save_result(asset, result)
            
            logger.info(f"‚úÖ {asset}: IV={current_iv:.2f}, Rank={iv_rank:.1f}%, Percentile={iv_percentile:.1f}% ({result['interpretation']})")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ IV Rank –¥–ª—è {asset}: {e}")
            return None
    
    def _interpret_iv_rank(self, iv_rank, iv_percentile):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è IV Rank"""
        # IV Rank > 50 = –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤—ã–≥–æ–¥–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω—ã)
        # IV Rank < 50 = –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –æ–ø—Ü–∏–æ–Ω—ã)
        
        if iv_rank > 75:
            return "VERY_HIGH"  # –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤
        elif iv_rank > 50:
            return "HIGH"       # –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        elif iv_rank < 25:
            return "VERY_LOW"   # –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤
        elif iv_rank < 50:
            return "LOW"        # –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        else:
            return "NEUTRAL"
    
    def _save_result(self, asset, result):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            filename = f"{asset}_ivrank_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            filepath = os.path.join(self.output_dir, filename)
            
            with open(filepath, 'w') as f:
                json.dump(result, f, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IV Rank: {e}")
    
    def calculate_all(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å IV Rank –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        assets = ['BTC', 'ETH', 'SOL', 'XRP', 'DOGE', 'MNT']
        results = {}
        
        logger.info("=" * 60)
        logger.info("üìä IV RANK CALCULATOR")
        logger.info("=" * 60)
        
        for asset in assets:
            result = self.calculate_iv_rank(asset)
            if result:
                results[asset] = result
        
        logger.info("=" * 60)
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(results)}")
        logger.info("=" * 60)
        
        return results


if __name__ == '__main__':
    calc = IVRankCalculator()
    calc.calculate_all()
