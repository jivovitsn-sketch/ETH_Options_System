#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ADVANCED SIGNALS GENERATOR - Stage 1.4 Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DataIntegrator + SignalAnalyzer + SignalHistoryLogger
"""

import sqlite3
import requests
import os
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv
import logging

# NEW COMPONENTS
from data_integrator import DataIntegrator
from signal_analyzer import SignalAnalyzer
from signal_history_logger import SignalHistoryLogger
from backtest_params import get_default_config

# OLD IMPORTS (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from asset_config import get_min_confidence, get_min_interval
from option_pricing import (
    OptionPricing, 
    OptionPositionManager, 
    generate_option_strategies, 
    format_option_signal_message
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

class SignalGenerator:
    def __init__(self):
        # –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.db_path = 'data/oi_signals.db'
        self.assets = ['BTC', 'ETH', 'SOL', 'XRP', 'DOGE', 'MNT']
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ - STAGE 1.4
        logger.info("üöÄ Initializing Stage 1.4 components...")
        self.config = get_default_config()
        self.data_integrator = DataIntegrator()
        self.signal_analyzer = SignalAnalyzer(self.config)
        self.history_logger = SignalHistoryLogger()
        
        logger.info(f"‚úÖ Config: {self.signal_analyzer._get_config_hash()}")
        logger.info(f"‚úÖ Min confidence: {self.config['min_confidence']}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self._init_signals_db()
    
    def _init_signals_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS signals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp INTEGER,
                asset TEXT,
                signal_type TEXT,
                confidence REAL,
                spot_price REAL,
                message TEXT
            )
        ''')
        conn.commit()
        conn.close()
    
    def get_last_signal_time(self, asset):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT timestamp FROM signals
            WHERE asset = ? AND signal_type != 'NO_SIGNAL'
            ORDER BY timestamp DESC LIMIT 1
        ''', (asset,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return datetime.fromtimestamp(result[0])
        return None
    
    def should_send_signal(self, asset, signal_result):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ confidence
        if signal_result['confidence'] < self.config['min_confidence']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if signal_result['signal_type'] == 'NO_SIGNAL':
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        last_time = self.get_last_signal_time(asset)
        if last_time:
            min_interval = get_min_interval(asset)
            time_diff = datetime.now() - last_time
            if time_diff.total_seconds() < min_interval * 60:
                return False
        
        return True
    
    def send_telegram_message(self, message, is_vip=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            
            if is_vip:
                chat_id = os.getenv('VIP_CHAT_ID')
            else:
                chat_id = os.getenv('FREE_CHAT_ID')
            
            if not bot_token or not chat_id:
                logger.warning("‚ö†Ô∏è Telegram credentials not found")
                return False
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram message sent")
                return True
            else:
                logger.error(f"‚ùå Telegram error: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Telegram exception: {e}")
            return False
    
    def save_signal_to_db(self, asset, signal_type, confidence, spot_price, message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO signals (timestamp, asset, signal_type, confidence, spot_price, message)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                int(datetime.now().timestamp()),
                asset,
                signal_type,
                confidence,
                spot_price,
                message
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå Error saving to DB: {e}")
    
    def process_asset(self, asset):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê STAGE 1.4"""
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {asset}...")
        
        try:
            # 1. –°–û–ë–ò–†–ê–ï–ú –î–ê–ù–ù–´–ï —á–µ—Ä–µ–∑ DataIntegrator
            data = self.data_integrator.get_all_data(asset)
            
            quality = data.get('quality', {})
            logger.info(f"üìä Data quality: {quality.get('status')} ({quality.get('completeness', 0)*100:.0f}%)")
            
            # 2. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú —á–µ—Ä–µ–∑ SignalAnalyzer
            signal_result = self.signal_analyzer.analyze(data)
            
            if not signal_result:
                logger.info(f"‚û°Ô∏è {asset}: No signal generated (filters)")
                return False
            
            # 3. –ü–†–û–í–ï–†–Ø–ï–ú –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if not self.should_send_signal(asset, signal_result):
                logger.info(f"‚û°Ô∏è {asset}: {signal_result['signal_type']} ({signal_result['confidence']*100:.0f}%) - skip")
                return False
            
            # 4. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ü–¶–ò–û–ù–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô
            spot_price = data.get('spot_price')
            if not spot_price:
                logger.warning(f"‚ö†Ô∏è {asset}: No spot price")
                return False
            
            strategies = generate_option_strategies(
                asset, 
                signal_result['signal_type'], 
                spot_price, 
                signal_result['confidence']
            )
            
            # 5. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
            message = format_option_signal_message(
                asset,
                signal_result['signal_type'],
                signal_result['confidence'],
                spot_price,
                strategies
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º reasoning
            if signal_result.get('reasoning'):
                message += "\n\nüìä **–ê–ù–ê–õ–ò–ó:**\n"
                for reason in signal_result['reasoning'][:3]:
                    message += f"‚Ä¢ {reason}\n"
            
            # 6. –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
            self.send_telegram_message(message, is_vip=True)
            
            # 7. –°–û–•–†–ê–ù–ï–ù–ò–ï
            # –°—Ç–∞—Ä–∞—è –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            self.save_signal_to_db(
                asset,
                signal_result['signal_type'],
                signal_result['confidence'],
                spot_price,
                message
            )
            
            # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - SignalHistoryLogger
            history_entry = {
                'asset': asset,
                'signal': signal_result,
                'data_snapshot': data,
                'strategies': strategies
            }
            self.history_logger.log_signal(history_entry)
            
            logger.info(f"‚úÖ {asset}: {signal_result['signal_type']} ({signal_result['confidence']*100:.0f}%) sent!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error processing {asset}: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        logger.info("=" * 80)
        logger.info(f"üöÄ SIGNAL GENERATION: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üìù Config: {self.signal_analyzer._get_config_hash()}")
        logger.info("=" * 80)
        
        sent_count = 0
        
        for asset in self.assets:
            if self.process_asset(asset):
                sent_count += 1
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        
        logger.info("=" * 80)
        logger.info(f"‚úÖ Analysis complete. Signals sent: {sent_count}/{len(self.assets)}")
        logger.info("=" * 80)


if __name__ == '__main__':
    generator = SignalGenerator()
    generator.run_analysis()
