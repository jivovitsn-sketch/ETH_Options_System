#!/usr/bin/env python3
"""
SMART SIGNALS GENERATOR - –¢–û–õ–¨–ö–û –ù–ê –ó–ê–ö–†–´–¢–ò–ò –°–í–ï–ß–ò –ò –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –°–ò–ì–ù–ê–õ–ê
"""

import sqlite3
import pandas as pd
import numpy as np
import logging
import requests
import json
import os
from datetime import datetime, timedelta
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
def load_env():
    env_vars = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except FileNotFoundError:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return env_vars

env_vars = load_env()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=env_vars.get('LOG_LEVEL', 'INFO'),
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/smart_signals.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SmartSignalGenerator:
    def __init__(self):
        self.symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'DOGE', 'MNT']
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_bot_token = env_vars.get('TELEGRAM_BOT_TOKEN', '')
        self.admin_chat_id = env_vars.get('TELEGRAM_ADMIN_CHAT_ID', '')
        self.free_chat_id = env_vars.get('TELEGRAM_FREE_CHAT_ID', '')
        self.vip_chat_id = env_vars.get('TELEGRAM_VIP_CHAT_ID', '')
        
        # –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.proxy_url = env_vars.get('TELEGRAM_PROXY_URL', '')
        self.proxy_username = env_vars.get('TELEGRAM_PROXY_USERNAME', '')
        self.proxy_password = env_vars.get('TELEGRAM_PROXY_PASSWORD', '')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
        self.proxies = None
        if self.proxy_url:
            proxy_auth = f"{self.proxy_username}:{self.proxy_password}@" if self.proxy_username else ""
            self.proxies = {
                'http': f"http://{proxy_auth}{self.proxy_url.replace('http://', '')}",
                'https': f"http://{proxy_auth}{self.proxy_url.replace('http://', '')}",
            }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.min_confidence = 0.7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.signal_timeframe = 15  # –¢–∞–π–º—Ñ—Ä–µ–π–º –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
        
        logger.info(f"üîß –£–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â•{self.min_confidence}, —Ç–∞–π–º—Ñ—Ä–µ–π–º {self.signal_timeframe}–º–∏–Ω")
        
    def get_last_signal(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            conn = sqlite3.connect('data/oi_signals.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT signal_type, signal_strength, timestamp 
                FROM signals 
                WHERE asset = ? AND signal_strength >= ?
                ORDER BY timestamp DESC 
                LIMIT 1
            ''', (symbol, self.min_confidence))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'signal_type': result[0],
                    'confidence': result[1],
                    'timestamp': result[2]
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
            return None

    def should_send_signal(self, symbol: str, new_signal: dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª"""
        last_signal = self.get_last_signal(symbol)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        if not last_signal:
            return new_signal['confidence'] >= self.min_confidence
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏
        current_time = datetime.now()
        last_signal_time = datetime.fromtimestamp(last_signal['timestamp'])
        time_diff = (current_time - last_signal_time).total_seconds() / 60
        
        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if time_diff < self.signal_timeframe:
            logger.info(f"‚è∞ {symbol}: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—Ä–æ—à–ª–æ –≤—Å–µ–≥–æ {time_diff:.1f} –º–∏–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal_changed = (
            last_signal['signal_type'] != new_signal['signal'] or
            abs(last_signal['confidence'] - new_signal['confidence']) > 0.2
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –ò –æ–Ω —Å–∏–ª—å–Ω—ã–π
        should_send = signal_changed and new_signal['confidence'] >= self.min_confidence
        
        if should_send:
            logger.info(f"üîÑ {symbol}: –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è {last_signal['signal_type']}‚Üí{new_signal['signal']}")
        else:
            logger.info(f"‚û°Ô∏è {symbol}: –°–∏–≥–Ω–∞–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —Å–ª–∞–±—ã–π")
        
        return should_send

    def get_spot_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–ø–æ—Ç–æ–≤—É—é —Ü–µ–Ω—É"""
        try:
            conn = sqlite3.connect('data/futures_data.db')
            query = "SELECT last_price FROM spot_data WHERE symbol = ? ORDER BY timestamp DESC LIMIT 1"
            df = pd.read_sql_query(query, conn, params=(f"{symbol}USDT",))
            conn.close()
            
            if not df.empty:
                return float(df.iloc[0]['last_price'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0

    def analyze_oi_data(self, symbol: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ OI –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect('data/unlimited_oi.db')
            
            query = """
                SELECT timestamp, open_interest, strike, option_type
                FROM all_positions_tracking 
                WHERE asset = ? 
                ORDER BY timestamp DESC 
                LIMIT 200
            """
            df = pd.read_sql_query(query, conn, params=(symbol,))
            conn.close()
            
            if df.empty or len(df) < 10:
                return {"signal": "NEUTRAL", "confidence": 0.3}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ timestamp –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π OI
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
            oi_by_time = df.groupby('timestamp')['open_interest'].sum().reset_index()
            oi_by_time = oi_by_time.sort_values('timestamp')
            
            if len(oi_by_time) < 5:
                return {"signal": "NEUTRAL", "confidence": 0.3}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ OI
            recent_oi = oi_by_time['open_interest'].tail(5)
            oi_trend = (recent_oi.iloc[-1] - recent_oi.iloc[0]) / recent_oi.iloc[0] if recent_oi.iloc[0] != 0 else 0
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–π–∫–∞–º
            current_data = df[df['timestamp'] == df['timestamp'].max()]
            call_oi = current_data[current_data['option_type'] == 'CALL']['open_interest'].sum()
            put_oi = current_data[current_data['option_type'] == 'PUT']['open_interest'].sum()
            
            if call_oi + put_oi == 0:
                return {"signal": "NEUTRAL", "confidence": 0.3}
            
            call_put_ratio = call_oi / (call_oi + put_oi)
            
            # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ OI
            if oi_trend > 0.1 and call_put_ratio > 0.6:
                return {"signal": "BULLISH", "confidence": min(0.9, oi_trend), "oi_trend": oi_trend}
            elif oi_trend < -0.1 and call_put_ratio < 0.4:
                return {"signal": "BEARISH", "confidence": min(0.9, abs(oi_trend)), "oi_trend": oi_trend}
            else:
                return {"signal": "NEUTRAL", "confidence": 0.3, "oi_trend": oi_trend}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OI {symbol}: {e}")
            return {"signal": "NEUTRAL", "confidence": 0.3}

    def analyze_price_trend(self, symbol: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            conn = sqlite3.connect('data/futures_data.db')
            
            query = """
                SELECT last_price, timestamp 
                FROM spot_data 
                WHERE symbol = ? 
                ORDER BY timestamp DESC 
                LIMIT 100
            """
            df = pd.read_sql_query(query, conn, params=(f"{symbol}USDT",))
            conn.close()
            
            if df.empty or len(df) < 10:
                return {"signal": "NEUTRAL", "confidence": 0.3}
            
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
            df = df.sort_values('timestamp')
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            short_trend = (df['last_price'].iloc[-1] - df['last_price'].iloc[-5]) / df['last_price'].iloc[-5]
            medium_trend = (df['last_price'].iloc[-1] - df['last_price'].iloc[-20]) / df['last_price'].iloc[-20]
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if short_trend > 0.03 and medium_trend > 0.05:
                return {"signal": "BULLISH", "confidence": min(0.9, (short_trend + medium_trend)/2), "trend": (short_trend + medium_trend)/2}
            elif short_trend < -0.03 and medium_trend < -0.05:
                return {"signal": "BEARISH", "confidence": min(0.9, abs(short_trend + medium_trend)/2), "trend": (short_trend + medium_trend)/2}
            else:
                return {"signal": "NEUTRAL", "confidence": 0.3, "trend": (short_trend + medium_trend)/2}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω—ã {symbol}: {e}")
            return {"signal": "NEUTRAL", "confidence": 0.3}

    def generate_combined_signal(self, symbol: str) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            current_price = self.get_spot_price(symbol)
            if current_price == 0:
                return {"symbol": symbol, "signal": "NEUTRAL", "confidence": 0.3}
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            signals = {
                'oi': self.analyze_oi_data(symbol),
                'price': self.analyze_price_trend(symbol)
            }
            
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            weights = {'oi': 0.6, 'price': 0.4}
            bullish_score = 0.0
            bearish_score = 0.0
            
            for source, data in signals.items():
                weight = weights[source]
                if data['signal'] == 'BULLISH':
                    bullish_score += data['confidence'] * weight
                elif data['signal'] == 'BEARISH':
                    bearish_score += data['confidence'] * weight
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if bullish_score > bearish_score + 0.2:
                final_signal = "BULLISH"
                final_confidence = min(0.95, bullish_score)
            elif bearish_score > bullish_score + 0.2:
                final_signal = "BEARISH"
                final_confidence = min(0.95, bearish_score)
            else:
                final_signal = "NEUTRAL"
                final_confidence = max(0.3, (bullish_score + bearish_score) / 2)
            
            return {
                "symbol": symbol,
                "signal": final_signal,
                "confidence": final_confidence,
                "price": current_price,
                "components": signals,
                "timestamp": int(datetime.now().timestamp())
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return {"symbol": symbol, "signal": "NEUTRAL", "confidence": 0.3}

    def send_telegram_to_channel(self, chat_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Telegram –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        try:
            if not self.telegram_bot_token or not chat_id:
                return False
                
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.proxies:
                response = requests.post(url, json=payload, timeout=30, proxies=self.proxies)
            else:
                response = requests.post(url, json=payload, timeout=30)
            
            return response.status_code == 200
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∫–∞–Ω–∞–ª {chat_id}: {e}")
            return False

    def send_signal_alert(self, signal: dict, is_cancellation: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
        emoji = "üü¢" if signal['signal'] == "BULLISH" else "üî¥" if signal['signal'] == "BEARISH" else "üü°"
        
        if is_cancellation:
            base_message = f"""
üö´ *CANCELLATION* üö´

*Asset:* {signal['symbol']}
*Previous Signal:* {signal['signal']}
*Price:* ${signal['price']:.2f}

*Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        else:
            base_message = f"""
{emoji} *{signal['signal']} SIGNAL* {emoji}

*Asset:* {signal['symbol']}
*Price:* ${signal['price']:.2f}
*Confidence:* {signal['confidence']:.1%}

*Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        # –ê–¥–º–∏–Ω –∫–∞–Ω–∞–ª - –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–º–µ–Ω—ã
        if self.admin_chat_id:
            admin_message = f"üëë ADMIN {base_message}"
            self.send_telegram_to_channel(self.admin_chat_id, admin_message)
        
        # VIP –∫–∞–Ω–∞–ª - —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ –æ—Ç–º–µ–Ω—ã)
        if self.vip_chat_id and not is_cancellation and signal['confidence'] >= 0.7:
            vip_message = f"üíé VIP {base_message}"
            if signal['confidence'] >= 0.8:
                vip_message += "\nüö® *HIGH CONFIDENCE* - Consider position"
            self.send_telegram_to_channel(self.vip_chat_id, vip_message)

    def save_signal(self, signal: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            conn = sqlite3.connect('data/oi_signals.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO signals (
                    timestamp, date, asset, signal_type, symbol, 
                    signal_strength, message, spot_price, entry_suggestion
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                signal['timestamp'],
                datetime.now().strftime('%Y-%m-%d'),
                signal['symbol'],
                signal['signal'],
                signal['symbol'],
                signal['confidence'],
                f"Smart signal: {signal['signal']} with {signal['confidence']:.1%} confidence",
                signal['price'],
                f"Monitor {signal['symbol']} for {signal['signal'].lower()} opportunities"
            ))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    def check_signal_cancellation(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É —Å–∏–≥–Ω–∞–ª–∞"""
        last_signal = self.get_last_signal(symbol)
        
        if not last_signal or last_signal['signal_type'] == 'NEUTRAL':
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
        current_signal = self.generate_combined_signal(symbol)
        
        # –ï—Å–ª–∏ –±—ã–ª —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –∞ —Å–µ–π—á–∞—Å —Å—Ç–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª–∞–±—ã–π - –æ—Ç–º–µ–Ω—è–µ–º
        if (last_signal['confidence'] >= self.min_confidence and 
            current_signal['confidence'] < self.min_confidence):
            return True
        
        return False

    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üß† –ó–ê–ü–£–°–ö –£–ú–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –°–ò–ì–ù–ê–õ–û–í")
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(self.symbols)} –∞–∫—Ç–∏–≤–æ–≤")
        logger.info("=" * 60)
        
        signals_sent = 0
        cancellations_sent = 0
        
        for symbol in self.symbols:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—ã
            if self.check_signal_cancellation(symbol):
                last_signal = self.get_last_signal(symbol)
                cancellation_signal = {
                    'symbol': symbol,
                    'signal': last_signal['signal_type'],
                    'confidence': last_signal['confidence'],
                    'price': self.get_spot_price(symbol),
                    'timestamp': int(datetime.now().timestamp())
                }
                
                self.send_signal_alert(cancellation_signal, is_cancellation=True)
                logger.info(f"üö´ {symbol}: –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ {last_signal['signal_type']}")
                cancellations_sent += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal = self.generate_combined_signal(symbol)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
            self.save_signal(signal)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if self.should_send_signal(symbol, signal):
                self.send_signal_alert(signal)
                logger.info(f"‚úÖ {symbol}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª {signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.1%})")
                signals_sent += 1
            else:
                logger.info(f"‚û°Ô∏è {symbol}: {signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.1%}) - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
        
        logger.info("=" * 60)
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {signals_sent} —Å–∏–≥–Ω–∞–ª–æ–≤, {cancellations_sent} –æ—Ç–º–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    Path('logs').mkdir(exist_ok=True)
    
    generator = SmartSignalGenerator()
    generator.run_analysis()

if __name__ == "__main__":
    main()
