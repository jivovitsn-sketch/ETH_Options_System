#!/usr/bin/env python3
"""
Signal Analyzer v2 - —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import numpy as np
from typing import Dict, Any, List
from datetime import datetime

class SignalAnalyzer:
    def __init__(self, config: Dict[str, Any] = None):
        self.logger = logging.getLogger('SignalAnalyzer')
        self.config = config or self._get_default_config()

    def _get_default_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            # –í–µ—Å–∞ –≥—Ä—É–ø–ø
            'futures_weight': 0.35,
            'options_weight': 0.40,
            'timing_weight': 0.25,
            
            # –ü–æ—Ä–æ–≥–∏
            'min_confidence': 0.65,  # –°–Ω–∏–∑–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'strong_threshold': 0.75,
            'min_data_sources': 2
        }

    def analyze(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª"""
        self.logger.info(f"Analyzing data for {data.get('asset', 'unknown')}")

        # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        futures_analysis = self._analyze_futures(data)
        options_analysis = self._analyze_options(data)
        timing_analysis = self._analyze_timing(data)

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        total_confidence = (
            futures_analysis['confidence'] * self.config['futures_weight'] +
            options_analysis['confidence'] * self.config['options_weight'] +
            timing_analysis['confidence'] * self.config['timing_weight']
        )

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal_type = self._determine_signal_type(
            futures_analysis, options_analysis, timing_analysis, total_confidence
        )

        return {
            'signal_type': signal_type,
            'confidence': round(total_confidence, 3),
            'timestamp': datetime.now().isoformat(),
            'asset': data.get('asset', 'unknown'),
            'components': {
                'futures': futures_analysis,
                'options': options_analysis,
                'timing': timing_analysis
            },
            'reasoning': self._build_reasoning(signal_type, total_confidence, futures_analysis, options_analysis)
        }

    def _analyze_futures(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        indicators_used = []
        confidence = 0.5  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        direction = 'neutral'
        details = []

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏
        
        if data.get('pcr'):
            pcr_data = data['pcr']
            if 'ratio' in pcr_data:
                pcr_ratio = pcr_data['ratio']
                indicators_used.append('pcr')
                # PCR > 1 - –º–µ–¥–≤–µ–∂–∏–π, < 1 - –±—ã—á–∏–π
                if pcr_ratio > 1.2:
                    direction = 'bearish'
                    confidence = 0.7
                    details.append(f"PCR –≤—ã—Å–æ–∫–∏–π: {pcr_ratio}")
                elif pcr_ratio < 0.8:
                    direction = 'bullish' 
                    confidence = 0.7
                    details.append(f"PCR –Ω–∏–∑–∫–∏–π: {pcr_ratio}")
                else:
                    details.append(f"PCR –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π: {pcr_ratio}")

        return {
            'confidence': confidence,
            'direction': direction,
            'indicators_used': indicators_used,
            'details': details
        }

    def _analyze_options(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        indicators_used = []
        confidence = 0.5
        direction = 'neutral'
        details = []

        # –ê–Ω–∞–ª–∏–∑ PCR
        if data.get('pcr'):
            pcr_data = data['pcr']
            if 'ratio' in pcr_data:
                pcr_ratio = pcr_data['ratio']
                indicators_used.append('pcr')
                
                # –õ–æ–≥–∏–∫–∞ PCR
                if pcr_ratio > 1.3:
                    direction = 'bearish'
                    confidence = max(confidence, 0.8)
                    details.append(f"–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π PCR: {pcr_ratio}")
                elif pcr_ratio > 1.1:
                    direction = 'bearish'
                    confidence = max(confidence, 0.6)
                    details.append(f"–ú–µ–¥–≤–µ–∂–∏–π PCR: {pcr_ratio}")
                elif pcr_ratio < 0.7:
                    direction = 'bullish'
                    confidence = max(confidence, 0.8)
                    details.append(f"–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π PCR: {pcr_ratio}")
                elif pcr_ratio < 0.9:
                    direction = 'bullish'
                    confidence = max(confidence, 0.6)
                    details.append(f"–ë—ã—á–∏–π PCR: {pcr_ratio}")

        # –ê–Ω–∞–ª–∏–∑ Max Pain
        if data.get('max_pain'):
            max_pain_data = data['max_pain']
            if 'max_pain_price' in max_pain_data and 'current_price' in max_pain_data:
                max_pain = max_pain_data['max_pain_price']
                current = max_pain_data['current_price']
                indicators_used.append('max_pain')
                
                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ max pain - –±—ã—á—å–µ –¥–∞–≤–ª–µ–Ω–∏–µ
                if current > max_pain * 1.02:  # +2%
                    direction = 'bullish'
                    confidence = max(confidence, 0.7)
                    details.append(f"–¶–µ–Ω–∞ –≤—ã—à–µ Max Pain: {current} > {max_pain}")
                elif current < max_pain * 0.98:  # -2%
                    direction = 'bearish'
                    confidence = max(confidence, 0.7)
                    details.append(f"–¶–µ–Ω–∞ –Ω–∏–∂–µ Max Pain: {current} < {max_pain}")

        # –ê–Ω–∞–ª–∏–∑ Vanna
        if data.get('vanna'):
            vanna_data = data['vanna']
            if 'total_vanna' in vanna_data:
                total_vanna = vanna_data['total_vanna']
                indicators_used.append('vanna')
                
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è vanna - –±—ã—á—å—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è - –º–µ–¥–≤–µ–∂—å—è
                if total_vanna > 0:
                    direction = 'bullish'
                    confidence = max(confidence, 0.6)
                    details.append(f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è Vanna: {total_vanna}")
                else:
                    direction = 'bearish'
                    confidence = max(confidence, 0.6)
                    details.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è Vanna: {total_vanna}")

        return {
            'confidence': confidence,
            'direction': direction,
            'indicators_used': indicators_used,
            'details': details
        }

    def _analyze_timing(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∞–π–º–∏–Ω–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è timing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        return {
            'confidence': 0.5,
            'direction': 'neutral',
            'indicators_used': [],
            'details': ['Timing analysis pending implementation']
        }

    def _determine_signal_type(self, futures: Dict, options: Dict, timing: Dict, confidence: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞"""
        if confidence < self.config['min_confidence']:
            return 'NO_SIGNAL'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        directions = {
            'bullish': 0,
            'bearish': 0,
            'neutral': 0
        }
        
        for analysis in [futures, options, timing]:
            directions[analysis['direction']] += 1
        
        if directions['bullish'] > directions['bearish']:
            signal_direction = 'BULLISH'
        elif directions['bearish'] > directions['bullish']:
            signal_direction = 'BEARISH'
        else:
            signal_direction = 'NEUTRAL'

        if confidence >= self.config['strong_threshold']:
            return f"STRONG_{signal_direction}"
        else:
            return f"WEAK_{signal_direction}"

    def _build_reasoning(self, signal_type: str, confidence: float, futures: Dict, options: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal_type == 'NO_SIGNAL':
            return f"Confidence too low: {confidence} < {self.config['min_confidence']}"
        
        reasoning_parts = []
        
        if futures['details']:
            reasoning_parts.append(f"Futures: {', '.join(futures['details'])}")
        if options['details']:
            reasoning_parts.append(f"Options: {', '.join(options['details'])}")
            
        if reasoning_parts:
            return f"{signal_type} with {confidence} confidence. " + ". ".join(reasoning_parts)
        else:
            return f"{signal_type} signal with {confidence} confidence"

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    from data_integrator import DataIntegrator
    
    integrator = DataIntegrator()
    analyzer = SignalAnalyzer()
    
    print("üß™ SignalAnalyzer v2 - –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 50)
    
    data = integrator.get_all_data('ETH')
    signal = analyzer.analyze(data)
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ: {data['data_quality']['available_sources']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print(f"üìà –°–∏–≥–Ω–∞–ª: {signal['signal_type']}")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']}")
    print(f"üß† –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal['reasoning']}")
    print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {signal['components']}")
