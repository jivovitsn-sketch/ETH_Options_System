#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω—ã–π health check –¥–ª—è Stage 1.4 + 1.5
"""

import json
import logging
from data_integrator import DataIntegrator
from signal_analyzer import SignalAnalyzer
from backtest_engine import BacktestEngine

def main():
    print("üîß SYSTEM HEALTH CHECK - STAGE 1.4 + 1.5")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1. üìã –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    try:
        with open('signal_config.json', 'r') as f:
            config = json.load(f)
        required_params = [
            'futures_weight', 'options_weight', 'timing_weight',
            'min_confidence', 'strong_threshold', 'min_data_sources',
            'pcr_bullish_threshold', 'pcr_bearish_threshold', 
            'max_pain_threshold', 'vanna_threshold'
        ]
        
        missing_params = [p for p in required_params if p not in config]
        if missing_params:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
        else:
            print(f"   ‚úÖ –í—Å–µ {len(required_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ DataIntegrator
    print("\n2. üîÑ –ü–†–û–í–ï–†–ö–ê DATA INTEGRATOR")
    try:
        integrator = DataIntegrator()
        assets = integrator.get_available_assets()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(assets)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ETH
        eth_data = integrator.get_all_data('ETH')
        quality = eth_data['data_quality']
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö ETH: {quality['quality_score']} ({quality['available_sources']}/{quality['total_sources']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
        found_sources = []
        for key, value in eth_data.items():
            if key not in ['timestamp', 'asset', 'data_quality'] and value and len(value) > 0:
                non_meta_fields = [k for k in value.keys() if not k.startswith('_')]
                if non_meta_fields:
                    found_sources.append(key)
        
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(found_sources)}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ DataIntegrator: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SignalAnalyzer
    print("\n3. üéØ –ü–†–û–í–ï–†–ö–ê SIGNAL ANALYZER")
    try:
        analyzer = SignalAnalyzer(config)
        signal = analyzer.analyze(eth_data)
        print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal['signal_type']}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']}")
        print(f"   üß† –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal['reasoning']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = analyzer.get_performance_metrics()
        print(f"   üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {metrics}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ SignalAnalyzer: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Backtest Engine
    print("\n4. üìä –ü–†–û–í–ï–†–ö–ê BACKTEST ENGINE")
    try:
        engine = BacktestEngine()
        results = engine.run_backtest()
        print(f"   ‚úÖ Backtest engine —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   üìà –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–æ trades: {results['total_trades']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        param_ranges = {
            'min_confidence': [0.55, 0.60, 0.65],
            'futures_weight': [0.3, 0.35, 0.4]
        }
        optimization = engine.optimize_parameters(param_ranges)
        print(f"   ü§ñ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {len(optimization)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Backtest Engine: {e}")
    
    # 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n5. üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Stage 1.5
    requirements = {
        "DataIntegrator —Ä–∞–±–æ—Ç–∞–µ—Ç": integrator is not None,
        "SignalAnalyzer –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã": 'signal' in locals(),
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞": 'config' in locals() and len(config) >= 10,
        "Backtest Engine —Ä–∞–±–æ—Ç–∞–µ—Ç": 'engine' in locals(),
        "–ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ": eth_data['data_quality']['available_sources'] >= 3
    }
    
    passed = sum(requirements.values())
    total = len(requirements)
    
    print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {passed}/{total} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    
    for req, status in requirements.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"   {icon} {req}")
    
    if passed == total:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö STAGE 1.5!")
        print("   –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –±—ç–∫—Ç–µ—Å—Ç –∏ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é!")
    else:
        print(f"\n‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–û–ö")
        print("   –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    logging.basicConfig(level=logging.ERROR)  # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    main()
