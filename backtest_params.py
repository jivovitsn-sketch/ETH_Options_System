#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BACKTEST PARAMETERS - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ
Stage 1.4.4 (Updated)
"""

BACKTEST_PARAMETERS = {
    # ===== –í–ï–°–ê –ì–†–£–ü–ü =====
    'futures_weight': {
        'min': 0.20,
        'max': 0.50,
        'step': 0.05,
        'default': 0.35,
        'description': '–í–µ—Å —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    'options_weight': {
        'min': 0.30,
        'max': 0.60,
        'step': 0.05,
        'default': 0.45,
        'description': '–í–µ—Å –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    'timing_weight': {
        'min': 0.10,
        'max': 0.40,
        'step': 0.05,
        'default': 0.20,
        'description': '–í–µ—Å —Ç–∞–π–º–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    
    # ===== –ü–û–†–û–ì–ò –î–õ–Ø –ò–ù–î–ò–ö–ê–¢–û–†–û–í =====
    'pcr_bullish_threshold': {
        'min': 0.6,
        'max': 1.0,
        'step': 0.1,
        'default': 0.8,
        'description': 'PCR –Ω–∏–∂–µ —ç—Ç–æ–≥–æ = –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª'
    },
    'pcr_bearish_threshold': {
        'min': 1.0,
        'max': 1.6,
        'step': 0.1,
        'default': 1.2,
        'description': 'PCR –≤—ã—à–µ —ç—Ç–æ–≥–æ = –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'
    },
    'max_pain_threshold': {
        'min': 0.01,
        'max': 0.05,
        'step': 0.01,
        'default': 0.02,
        'description': '–ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç Max Pain (%)'
    },
    'vanna_threshold': {
        'min': 0,
        'max': 1000,
        'step': 100,
        'default': 0,
        'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Vanna –¥–ª—è —É—á—ë—Ç–∞'
    },
    
    # ===== –§–ò–õ–¨–¢–†–´ =====
    'min_confidence': {
        'min': 0.50,
        'max': 0.80,
        'step': 0.05,
        'default': 0.60,
        'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞'
    },
    'strong_threshold': {
        'min': 0.70,
        'max': 0.95,
        'step': 0.05,
        'default': 0.75,
        'description': '–ü–æ—Ä–æ–≥ –¥–ª—è STRONG —Å–∏–≥–Ω–∞–ª–∞'
    },
    'min_data_sources': {
        'min': 2,
        'max': 7,
        'step': 1,
        'default': 2,
        'description': '–ú–∏–Ω–∏–º—É–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞'
    }
}

def count_combinations():
    """–ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    total = 1
    for param, settings in BACKTEST_PARAMETERS.items():
        if 'min' in settings and 'max' in settings and 'step' in settings:
            count = int((settings['max'] - settings['min']) / settings['step']) + 1
            total *= count
    return total

def get_default_config():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å signal_analyzer.py"""
    config = {
        # –í–µ—Å–∞ –≥—Ä—É–ø–ø
        'futures_weight': 0.35,
        'options_weight': 0.45,
        'timing_weight': 0.20,
        
        # –ü–æ—Ä–æ–≥–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        'pcr_bullish_threshold': 0.8,
        'pcr_bearish_threshold': 1.2,
        'max_pain_threshold': 0.02,
        'vanna_threshold': 0,
        
        # –§–∏–ª—å—Ç—Ä—ã
        'min_confidence': 0.60,
        'strong_threshold': 0.75,
        'min_data_sources': 2,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        'require_futures_confirm': False,
        'require_options_confirm': True,
        'min_data_quality': 'ACCEPTABLE'
    }
    
    return config

def generate_random_config():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import random
    
    config = get_default_config()
    
    for param, settings in BACKTEST_PARAMETERS.items():
        if 'min' in settings and 'max' in settings and 'step' in settings:
            min_val = settings['min']
            max_val = settings['max']
            step = settings['step']
            
            steps_count = int((max_val - min_val) / step)
            random_steps = random.randint(0, steps_count)
            value = min_val + random_steps * step
            
            config[param] = value
    
    return config

if __name__ == '__main__':
    import json
    
    print("=" * 60)
    print("üîß BACKTEST PARAMETERS (Updated)")
    print("=" * 60)
    print()
    print(f"Total combinations: {count_combinations():,}")
    print()
    print("Default config:")
    print(json.dumps(get_default_config(), indent=2))
    print()
    print("=" * 60)
