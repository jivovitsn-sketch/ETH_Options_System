#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
"""

import os
import glob
import json
from datetime import datetime

def analyze_directory(directory, name):
    """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏"""
    if not os.path.exists(directory):
        return {"name": name, "status": "MISSING", "files": 0, "assets": []}
    
    files = glob.glob(f"{directory}/*.json")
    assets = set()
    
    for file in files:
        filename = os.path.basename(file)
        parts = filename.split('_')
        if len(parts) >= 2:
            assets.add(parts[0])
    
    return {
        "name": name,
        "status": "ACTIVE" if files else "EMPTY",
        "files": len(files),
        "assets": sorted(list(assets)),
        "latest_files": files[:3]  # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    }

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    directories = {
        'funding_rate': 'data/funding_rate',
        'liquidations': 'data/liquidations',
        'futures_oi': 'data/futures_oi',
        'pcr': 'data/pcr',
        'oi': 'data/oi',
        'max_pain': 'data/max_pain',
        'gamma_exposure': 'data/gamma_exposure',
        'vanna': 'data/vanna',
        'iv_rank': 'data/iv_rank',
        'volatility_greeks': 'data/volatility_greeks'
    }
    
    results = []
    for name, path in directories.items():
        result = analyze_directory(path, name)
        results.append(result)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –°–¢–ê–¢–£–° –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
    for result in results:
        status_icon = "‚úÖ" if result['status'] == 'ACTIVE' else "‚ùå" if result['status'] == 'MISSING' else "‚ö†Ô∏è"
        print(f"   {status_icon} {result['name']:20} - {result['files']:3d} —Ñ–∞–π–ª–æ–≤, –∞–∫—Ç–∏–≤—ã: {result['assets'][:3]}{'...' if len(result['assets']) > 3 else ''}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∞–∫—Ç–∏–≤–∞–º
    print(f"\nüéØ –û–ë–ó–û–† –ü–û –ê–ö–¢–ò–í–ê–ú:")
    all_assets = set()
    for result in results:
        if result['assets']:
            all_assets.update(result['assets'])
    
    for asset in sorted(all_assets):
        asset_indicators = []
        for result in results:
            if asset in result['assets']:
                asset_indicators.append(result['name'])
        
        print(f"   üìà {asset}: {len(asset_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - {', '.join(asset_indicators[:3])}{'...' if len(asset_indicators) > 3 else ''}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    active_indicators = [r for r in results if r['status'] == 'ACTIVE']
    if len(active_indicators) >= 5:
        print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
    else:
        print("   ‚ö†Ô∏è  –ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è Stage 1.4
    critical_indicators = ['pcr', 'gamma_exposure', 'max_pain', 'vanna']
    available_critical = [r for r in results if r['name'] in critical_indicators and r['status'] == 'ACTIVE']
    
    print(f"   üéØ –î–ª—è Stage 1.4 –¥–æ—Å—Ç—É–ø–Ω–æ {len(available_critical)}/{len(critical_indicators)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    
    if len(available_critical) >= 2:
        print("   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ Stage 1.4!")
    else:
        print("   ‚ùå –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ Stage 1.4")

if __name__ == "__main__":
    main()
