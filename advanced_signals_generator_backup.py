from data_integration import *
from asset_config import get_min_confidence, get_min_interval
from data_integration import *
from asset_config import get_min_confidence, get_min_interval
import sqlite3
import requests
import os
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv
import logging
from option_pricing import OptionPricing, OptionPositionManager, generate_option_strategies, format_option_signal_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/smart_signals.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

load_dotenv()

class SignalGenerator:
    def __init__(self):
        self.db_path = 'data/oi_signals.db'
        self.assets = ['BTC', 'ETH', 'SOL', 'XRP', 'DOGE', 'MNT']
        self.min_confidence = 0.7
        self.min_interval_minutes = 15
        
    def get_last_signal_time(self, asset):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT timestamp FROM signals 
            WHERE asset = ? AND signal_type != 'NEUTRAL'
            ORDER BY timestamp DESC LIMIT 1
        ''', (asset,))
        
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result else 0
    
    def should_send_signal(self, asset, new_signal_type, new_confidence):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª"""
        last_time = self.get_last_signal_time(asset)
        current_time = int(time.time())
        time_diff_minutes = (current_time - last_time) / 60
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if time_diff_minutes < self.min_interval_minutes:
            logger.info(f"‚è∞ {asset}: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—Ä–æ—à–ª–æ –≤—Å–µ–≥–æ {time_diff_minutes:.1f} –º–∏–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if new_confidence < self.min_confidence:
            logger.info(f"üìä {asset}: –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {new_confidence:.1%}")
            return False
            
        return True
    
    def analyze_oi_volume(self, asset):
        """–ê–Ω–∞–ª–∏–∑ OI –∏ Volume (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        if asset == 'BTC':
            return 'BULLISH', 0.82
        elif asset == 'ETH':
            return 'BEARISH', 0.78
        else:
            return 'NEUTRAL', 0.3
    
    
    def send_telegram_message(self, message, is_vip=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_VIP_CHAT_ID' if is_vip else 'TELEGRAM_ADMIN_CHAT_ID')
            proxy_url = os.getenv('TELEGRAM_PROXY_URL')
            proxy_user = os.getenv('TELEGRAM_PROXY_USERNAME')
            proxy_pass = os.getenv('TELEGRAM_PROXY_PASSWORD')
            
            if not bot_token or not chat_id:
                logger.warning("‚ùå Telegram credentials not set")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxies = None
            if proxy_url:
                if proxy_user and proxy_pass:
                    proxy_with_auth = f"http://{proxy_user}:{proxy_pass}@{proxy_url.split('//')[1]}"
                else:
                    proxy_with_auth = proxy_url
                proxies = {
                    'http': proxy_with_auth,
                    'https': proxy_with_auth
                }
                logger.info(f"üîó Using proxy: {proxy_url}")
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å –ø—Ä–æ–∫—Å–∏
            response = requests.post(url, json=payload, proxies=proxies, timeout=20)
            if response.status_code == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ fallback
            try:
                if proxies:
                    logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                    response = requests.post(url, json=payload, timeout=20)
                    if response.status_code == 200:
                        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {response.text}")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ fallback: {e2}")

    
    def save_signal_to_db(self, asset, signal_type, confidence, spot_price, message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO signals 
                (timestamp, date, asset, signal_type, symbol, signal_strength, message, spot_price, entry_suggestion)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                int(time.time()),
                datetime.now().strftime('%Y-%m-%d'),
                asset,
                signal_type,
                asset + '-USD',
                confidence,
                message,
                spot_price,
                'Options strategies generated'
            ))
            
            conn.commit()
            conn.close()
            logger.info(f"üíæ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {asset} {signal_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def manage_option_positions(self, asset, signal_type, confidence):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            position_manager = OptionPositionManager()
            active_positions = position_manager.get_active_positions(asset)
            actions = []
            
            for position in active_positions:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                pos_id = position[0]
                pos_asset = position[1]
                pos_strategy = position[2]
                pos_type = position[3]
                strike = position[4]
                entry_prem = position[6]
                pnl = position[17]
                
                # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                if signal_type == "NEUTRAL":
                    if float(pnl) > 0.3 * float(entry_prem):  # 30% –ø—Ä–∏–±—ã–ª–∏
                        actions.append("CLOSE {} @ {} - Take profit 30%".format(pos_type, strike))
                    elif float(pnl) < -0.5 * float(entry_prem):  # -50% —É–±—ã—Ç–æ–∫
                        actions.append("CLOSE {} @ {} - Stop loss 50%".format(pos_type, strike))
                
                elif signal_type == "BEARISH" and pos_type == "CALL":
                    if confidence > 0.7:
                        actions.append("CLOSE CALL @ {} - Signal reversal".format(strike))
                    else:
                        actions.append("HEDGE PUT for CALL @ {}".format(strike))
                        
                elif signal_type == "BULLISH" and pos_type == "PUT":
                    if confidence > 0.7:
                        actions.append("CLOSE PUT @ {} - Signal reversal".format(strike)) 
                    else:
                        actions.append("HEDGE CALL for PUT @ {}".format(strike))
            
            return actions
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")
            return []
    
    def process_asset(self, asset):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {}...".format(asset))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –∏–∑ API)
        spot_prices = {'BTC': 112500, 'ETH': 4000, 'SOL': 145, 'XRP': 0.6, 'DOGE': 0.15, 'MNT': 0.8}
        spot_price = spot_prices.get(asset, 1000)
        
        # –ê–Ω–∞–ª–∏–∑ OI –∏ Volume
        signal_type, confidence = self.analyze_oi_volume(asset)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª
        if not self.should_send_signal(asset, signal_type, confidence):
            logger.info("‚û°Ô∏è {}: {} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.1%}) - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º".format(asset, signal_type, confidence))
            return False
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if signal_type in ['BULLISH', 'BEARISH'] and confidence >= self.min_confidence:
            try:
                strategies = generate_option_strategies(asset, signal_type, spot_price, confidence)
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                position_actions = self.manage_option_positions(asset, signal_type, confidence)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = format_option_signal_message(asset, signal_type, confidence, spot_price, strategies)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
                if position_actions:
                    message += "\n\nüîÑ **–î–ï–ô–°–¢–í–ò–Ø –° –ü–û–ó–ò–¶–ò–Ø–ú–ò:**\n"
                    for action in position_actions:
                        message += "‚Ä¢ {}\n".format(action)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                self.send_telegram_message(message, is_vip=True)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                self.save_signal_to_db(asset, signal_type, confidence, spot_price, message)
                
                logger.info("‚úÖ {}: {} —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.1%})".format(asset, signal_type, confidence))
                return True
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è {}: {}".format(asset, e))
                return False
        
        return False
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        logger.info("üß† –ó–ê–ü–£–°–ö –£–ú–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –°–ò–ì–ù–ê–õ–û–í")
        logger.info("üîß –£–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â•{}, —Ç–∞–π–º—Ñ—Ä–µ–π–º {}–º–∏–Ω".format(self.min_confidence, self.min_interval_minutes))
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {} –∞–∫—Ç–∏–≤–æ–≤".format(len(self.assets)))
        logger.info("=" * 60)
        
        signals_sent = 0
        cancellations = 0
        
        for asset in self.assets:
            try:
                result = self.process_asset(asset)
                if result:
                    signals_sent += 1
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}".format(asset, e))
        
        logger.info("=" * 60)
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {} —Å–∏–≥–Ω–∞–ª–æ–≤, {} –æ—Ç–º–µ–Ω".format(signals_sent, cancellations))

if __name__ == "__main__":
    generator = SignalGenerator()
    generator.run_analysis()
