#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ú–ï–°–Ø–ß–ù–´–• –û–¢–ß–ï–¢–û–í –≤ Telegram
"""
import schedule
import time
from datetime import datetime
from telegram_alerts_final import TelegramAlertsFinal
from dashboard_generator import TradingDashboard
from trading_journal import TradingJournal
import pandas as pd

class MonthlyReportSender:
    def __init__(self):
        self.telegram = TelegramAlertsFinal()
        self.dashboard = TradingDashboard()
        self.journal = TradingJournal()
        
    def send_monthly_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        print(f"üìä Generating monthly report for {datetime.now().strftime('%B %Y')}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥
            dashboard_image = self.dashboard.generate_monthly_dashboard()
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
            trades_df = pd.read_excel('data/Enhanced_Trading_Journal.xlsx', sheet_name='trades')
            
            # –°–æ–∑–¥–∞–µ–º FOMO —Ç–µ–∫—Å—Ç
            summary_text = self.dashboard.create_fomo_summary(trades_df)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª
            success = self.telegram.send_message(
                self.telegram.channels['admin'], 
                summary_text
            )
            
            if success:
                print("‚úÖ Monthly report sent to Telegram")
            else:
                print("‚ùå Failed to send monthly report")
                
            # TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
            # (–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ Telegram bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            
        except Exception as e:
            print(f"‚ùå Error sending monthly report: {e}")
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–µ 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 10:00
        schedule.every().month.at("10:00").do(self.send_monthly_report)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        # schedule.every().week.do(self.send_monthly_report)
        
        print("üìÖ Monthly report scheduler setup:")
        print("   ‚Ä¢ Monthly: 1st day of month at 10:00")
        print("   ‚Ä¢ Test mode: Weekly (comment out for production)")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        print("ü§ñ Monthly report scheduler started")
        
        while True:
            schedule.run_pending()
            time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

if __name__ == "__main__":
    sender = MonthlyReportSender()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    print("Testing monthly report...")
    sender.send_monthly_report()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    sender.setup_scheduler()
    
    # –ó–∞–ø—É—Å–∫ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
    # sender.run_scheduler()
