import numpy as np
from scipy.stats import norm
from math import log, sqrt, exp
from datetime import datetime, timedelta
import sqlite3
import logging

logger = logging.getLogger(__name__)

class OptionPricing:
    """–†–∞—Å—á–µ—Ç –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ Black-Scholes"""

    @staticmethod
    def calculate_iv(option_type, spot, strike, expiry_days, premium, risk_free=0.02):
        """–†–∞—Å—á–µ—Ç –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç IV
            iv = 0.5
            for _ in range(100):
                d1 = (log(spot/strike) + (risk_free + 0.5*iv**2)*(expiry_days/365)) / (iv*sqrt(expiry_days/365))
                d2 = d1 - iv*sqrt(expiry_days/365)

                if option_type == "CALL":
                    theoretical = spot * norm.cdf(d1) - strike * exp(-risk_free*expiry_days/365) * norm.cdf(d2)
                else:
                    theoretical = strike * exp(-risk_free*expiry_days/365) * norm.cdf(-d2) - spot * norm.cdf(-d1)

                diff = theoretical - premium
                if abs(diff) < 0.01:
                    return iv
                iv -= diff / (spot * norm.pdf(d1) * sqrt(expiry_days/365))
            return iv
        except Exception as e:
            logger.warning(f"IV calculation failed: {e}, using fallback 0.4")
            return 0.4

    @staticmethod
    def calculate_greeks(option_type, spot, strike, expiry_days, iv, risk_free=0.02):
        """–†–∞—Å—á–µ—Ç –≥—Ä–µ–∫–æ–≤"""
        try:
            T = expiry_days/365
            d1 = (log(spot/strike) + (risk_free + 0.5*iv**2)*T) / (iv*sqrt(T))
            d2 = d1 - iv*sqrt(T)

            if option_type == "CALL":
                delta = norm.cdf(d1)
                gamma = norm.pdf(d1) / (spot * iv * sqrt(T))
                theta = (-spot * norm.pdf(d1) * iv / (2*sqrt(T)) - 
                        risk_free * strike * exp(-risk_free*T) * norm.cdf(d2)) / 365
                vega = spot * norm.pdf(d1) * sqrt(T) / 100
            else:
                delta = norm.cdf(d1) - 1
                gamma = norm.pdf(d1) / (spot * iv * sqrt(T))
                theta = (-spot * norm.pdf(d1) * iv / (2*sqrt(T)) + 
                        risk_free * strike * exp(-risk_free*T) * norm.cdf(-d2)) / 365
                vega = spot * norm.pdf(d1) * sqrt(T) / 100

            return {
                'delta': round(delta, 4),
                'gamma': round(gamma, 6),
                'theta': round(theta, 4),
                'vega': round(vega, 4)
            }
        except Exception as e:
            logger.warning(f"Greeks calculation failed: {e}, using fallback values")
            return {'delta': 0.5, 'gamma': 0.01, 'theta': -0.05, 'vega': 0.02}

    @staticmethod
    def calculate_pop(option_type, spot, strike, expiry_days, iv, target_return=0.5):
        """–†–∞—Å—á–µ—Ç Probability of Profit"""
        try:
            T = expiry_days/365
            if option_type == "CALL":
                target_price = strike + (target_return * spot)
                d2 = (log(spot/target_price) + (0.02 - 0.5*iv**2)*T) / (iv*sqrt(T))
                pop = norm.cdf(d2)
            else:
                target_price = strike - (target_return * spot)
                d2 = (log(spot/target_price) + (0.02 - 0.5*iv**2)*T) / (iv*sqrt(T))
                pop = norm.cdf(-d2)
            return max(0.1, min(0.9, pop))
        except Exception as e:
            logger.warning(f"PoP calculation failed: {e}, using 0.5")
            return 0.5

class OptionPositionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""

    def __init__(self, db_path='data/oi_signals.db'):
        self.db_path = db_path

    def open_position(self, asset, strategy, option_type, strike, expiry_days,
                     premium, quantity, signal_strength):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            expiry_date = (datetime.now() + timedelta(days=expiry_days)).strftime('%Y-%m-%d')
            greeks = OptionPricing.calculate_greeks(option_type, strike * 1.02, strike, expiry_days, 0.6)
            pop = OptionPricing.calculate_pop(option_type, strike * 1.02, strike, expiry_days, 0.6)

            cursor.execute('''
                INSERT INTO option_positions
                (asset, strategy_type, option_type, strike_price, expiry_date,
                 entry_premium, current_premium, quantity, delta, theta, vega, gamma, pop,
                 days_to_expiry, status, signal_strength, pnl)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                asset, strategy, option_type, strike, expiry_date,
                premium, premium, quantity,
                greeks['delta'], greeks['theta'], greeks['vega'], greeks['gamma'], pop,
                expiry_days, 'ACTIVE', signal_strength, 0.0
            ))

            conn.commit()
            conn.close()
            logger.info(f"üìù –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {asset} {option_type} @ {strike}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def get_active_positions(self, asset=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if asset:
                cursor.execute('''
                    SELECT * FROM option_positions 
                    WHERE status = "ACTIVE" AND asset = ?
                    ORDER BY created_at DESC
                ''', (asset,))
            else:
                cursor.execute('''
                    SELECT * FROM option_positions 
                    WHERE status = "ACTIVE" 
                    ORDER BY created_at DESC
                ''')
            
            positions = cursor.fetchall()
            conn.close()
            return positions
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []



def get_dynamic_expiration_days(signal_type):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–Ω–µ–π –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    import random
    if signal_type == "BULLISH":
        return random.randint(30, 60)  # –î–ª–∏–Ω–Ω—ã–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—á—å–∏—Ö
    elif signal_type == "BEARISH":
        return random.randint(7, 30)   # –ö–æ—Ä–æ—Ç–∫–∏–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –¥–ª—è –º–µ–¥–≤–µ–∂—å–∏—Ö
    else:
        return random.randint(21, 45)  # –°—Ä–µ–¥–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö

def generate_option_strategy(asset, signal_type, spot_price):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é
    expiration_days = get_dynamic_expiration_days(signal_type)
    
    if signal_type == "BULLISH":
        return generate_bull_call_spread(asset, spot_price, expiration_days)
    elif signal_type == "BEARISH":
        return generate_bear_put_spread(asset, spot_price, expiration_days)
    else:
        return generate_long_straddle(asset, spot_price, expiration_days)


def generate_bull_call_spread(asset, spot_price, expiration_days):
    """–ë—ã—á–∏–π Call Spread —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏"""
    # –î–ª–∏–Ω–Ω—ã–π –∫–æ–ª–ª: ATM –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ ITM
    long_strike = spot_price * 0.98  # 2% ITM
    # –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–ª–ª: –¥–∞–ª—å—à–µ OTM –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
    short_strike = spot_price * 1.25  # 25% OTM
    
    # –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    spread_width = short_strike - long_strike
    max_profit = spread_width * 0.6  # ~60% –æ—Ç —à–∏—Ä–∏–Ω—ã
    premium = spread_width * 0.3  # ~30% –æ—Ç —à–∏—Ä–∏–Ω—ã
    
    return {
        'asset': asset,
        'strategy_type': 'BULL_CALL_SPREAD',
        'long_call_strike': round(long_strike, 2),
        'short_call_strike': round(short_strike, 2),
        'premium_paid': round(premium, 2),
        'max_profit': round(max_profit, 2),
        'max_loss': round(premium, 2),
        'break_even': round(long_strike + premium, 2),
        'probability_of_profit': 0.55,
        'expiration_days': expiration_days,
        'risk_reward_ratio': round(max_profit / premium, 2)
    }


def generate_bear_put_spread(asset, spot_price, expiration_days):
    """–ú–µ–¥–≤–µ–∂–∏–π Put Spread —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏"""
    # –î–ª–∏–Ω–Ω—ã–π –ø—É—Ç: ATM –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ ITM
    long_strike = spot_price * 1.02  # 2% ITM
    # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç: –¥–∞–ª—å—à–µ OTM
    short_strike = spot_price * 0.75  # 25% OTM
    
    # –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    spread_width = long_strike - short_strike
    max_profit = spread_width * 0.55  # ~55% –æ—Ç —à–∏—Ä–∏–Ω—ã
    premium = spread_width * 0.35  # ~35% –æ—Ç —à–∏—Ä–∏–Ω—ã
    
    return {
        'asset': asset,
        'strategy_type': 'BEAR_PUT_SPREAD',
        'long_put_strike': round(long_strike, 2),
        'short_put_strike': round(short_strike, 2),
        'premium_paid': round(premium, 2),
        'max_profit': round(max_profit, 2),
        'max_loss': round(premium, 2),
        'break_even': round(long_strike - premium, 2),
        'probability_of_profit': 0.50,
        'expiration_days': expiration_days,
        'risk_reward_ratio': round(max_profit / premium, 2)
    }


def generate_long_straddle(asset, spot_price, expiration_days):
    """–°—Ç—Ä—ç–¥–¥–ª –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    strike = spot_price
    
    # –î–ª—è —Å—Ç—Ä—ç–¥–¥–ª–∞ –Ω—É–∂–Ω–∞ –≤—ã—Å–æ–∫–∞—è –ø—Ä–µ–º–∏—è
    call_premium = spot_price * 0.04
    put_premium = spot_price * 0.038
    total_premium = call_premium + put_premium
    
    return {
        'asset': asset,
        'strategy_type': 'LONG_STRADDLE',
        'strike': round(strike, 2),
        'call_premium': round(call_premium, 2),
        'put_premium': round(put_premium, 2),
        'total_premium': round(total_premium, 2),
        'max_loss': round(total_premium, 2),
        'upper_breakeven': round(strike + total_premium, 2),
        'lower_breakeven': round(strike - total_premium, 2),
        'probability_of_profit': 0.45,
        'expiration_days': expiration_days
    }


def get_dynamic_expiration_days(asset, signal_type):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –†–ï–ê–õ–¨–ù–û–ô —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏"""
    from real_expirations import expiration_manager
    
    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é –∏–∑ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
    dte = expiration_manager.get_best_expiration(asset, signal_type)
    
    return dte


def generate_option_strategy(asset, signal_type, spot_price):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –†–ï–ê–õ–¨–ù–û–ô —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é –∏–∑ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
    expiration_days = get_dynamic_expiration_days(asset, signal_type)

    if signal_type == "BULLISH":
        return generate_bull_call_spread(asset, spot_price, expiration_days)
    elif signal_type == "BEARISH":
        return generate_bear_put_spread(asset, spot_price, expiration_days)
    else:
        return generate_long_straddle(asset, spot_price, expiration_days)
def generate_option_strategies(asset, signal_type, spot_price, confidence, expiry_days=45):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –†–ï–ê–õ–¨–ù–´–ú–ò —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è–º–∏ –∏ —à–∏—Ä–æ–∫–∏–º–∏ —Å–ø—Ä–µ–¥–∞–º–∏"""
    from real_expirations import expiration_manager
    
    # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é
    dte = expiration_manager.get_best_expiration(asset, signal_type)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–∑ –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏
    if signal_type == "BULLISH":
        strategy = generate_bull_call_spread(asset, spot_price, dte)
    elif signal_type == "BEARISH":
        strategy = generate_bear_put_spread(asset, spot_price, dte)
    else:
        strategy = generate_long_straddle(asset, spot_price, dte)
    
    return [strategy]
def format_option_signal_message(asset, signal_type, confidence, spot_price, strategies):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –ù–û–í–´–ú–ò —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    message = f"""üéØ {signal_type} OPTIONS SIGNAL: {asset}
‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%}

üí∞ –°–ü–û–¢ –¶–ï–ù–ê: ${spot_price:,.2f}
üìà IV –†–ê–ù–ì: 65% | üïí –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: {strategies[0]['expiration_days']} –¥–Ω–µ–π

---

üìä –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:

"""
    
    for i, strat in enumerate(strategies[:2], 1):
        strategy_type = strat['strategy_type']
        premium = strat.get('premium_paid', strat.get('total_premium', 0))
        
        if strategy_type == 'BULL_CALL_SPREAD':
            message += f"""**{i}. Bull Call Spread**
LONG CALL ${strat['long_call_strike']:.2f} / SHORT CALL ${strat['short_call_strike']:.2f}

üìà –ü–ê–†–ê–ú–ï–¢–†–´:
- –ü—Ä–µ–º–∏—è: ${premium:.2f} ({premium/spot_price*100:.1f}% –æ—Ç —Å–ø–æ—Ç–∞)
- Max Profit: ${strat['max_profit']:.2f}
- Max Loss: ${strat['max_loss']:.2f}
- Break-Even: ${strat['break_even']:.2f}
- Risk/Reward: {strat['risk_reward_ratio']:.2f}
- Probability of Profit: {strat['probability_of_profit']:.0%}
- –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {strat['expiration_days']} –¥–Ω–µ–π

üíº –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:
- –ë—é–¥–∂–µ—Ç: ${premium:.2f} –Ω–∞ —Å–ø—Ä–µ–¥
- –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏: 50% –æ—Ç max profit
- –°—Ç–æ–ø-–ª–æ—Å—Å: 60% –æ—Ç –ø—Ä–µ–º–∏–∏
- –†–æ–ª–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞ 21 –¥–µ–Ω—å –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏

"""
        elif strategy_type == 'BEAR_PUT_SPREAD':
            message += f"""**{i}. Bear Put Spread**
LONG PUT ${strat['long_put_strike']:.2f} / SHORT PUT ${strat['short_put_strike']:.2f}

üìà –ü–ê–†–ê–ú–ï–¢–†–´:
- –ü—Ä–µ–º–∏—è: ${premium:.2f} ({premium/spot_price*100:.1f}% –æ—Ç —Å–ø–æ—Ç–∞)
- Max Profit: ${strat['max_profit']:.2f}
- Max Loss: ${strat['max_loss']:.2f}
- Break-Even: ${strat['break_even']:.2f}
- Risk/Reward: {strat['risk_reward_ratio']:.2f}
- Probability of Profit: {strat['probability_of_profit']:.0%}
- –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {strat['expiration_days']} –¥–Ω–µ–π

üíº –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:
- –ë—é–¥–∂–µ—Ç: ${premium:.2f} –Ω–∞ —Å–ø—Ä–µ–¥
- –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏: 50% –æ—Ç max profit
- –°—Ç–æ–ø-–ª–æ—Å—Å: 60% –æ—Ç –ø—Ä–µ–º–∏–∏
- –†–æ–ª–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞ 21 –¥–µ–Ω—å –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏

"""
        elif strategy_type == 'LONG_STRADDLE':
            message += f"""**{i}. Long Straddle**
STRADDLE @ ${strat['strike']:.2f}

üìà –ü–ê–†–ê–ú–ï–¢–†–´:
- Call Premium: ${strat['call_premium']:.2f}
- Put Premium: ${strat['put_premium']:.2f}
- Total Premium: ${strat['total_premium']:.2f} ({strat['total_premium']/spot_price*100:.1f}% –æ—Ç —Å–ø–æ—Ç–∞)
- Upper Break-Even: ${strat['upper_breakeven']:.2f}
- Lower Break-Even: ${strat['lower_breakeven']:.2f}
- Probability of Profit: {strat['probability_of_profit']:.0%}
- –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {strat['expiration_days']} –¥–Ω–µ–π

üíº –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:
- –ë—é–¥–∂–µ—Ç: ${strat['total_premium']:.2f} –Ω–∞ —Å—Ç—Ä—ç–¥–¥–ª
- Max Loss: ${strat['max_loss']:.2f}
- –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤–∏–∂–µ–Ω–∏–µ ¬±{abs(strat['upper_breakeven']-spot_price)/spot_price*100:.1f}%

"""
    
    message += """---

‚ö†Ô∏è –í–ê–ñ–ù–û: 
- –í—Ä–µ–º–µ–Ω–Ω–æ–π decay (Theta) —É—Å–∫–æ—Ä—è–µ—Ç—Å—è –∑–∞ 30 –¥–Ω–µ–π –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
- IV –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–µ–º–∏—é
- –í—Å–µ–≥–¥–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ —Å—Ç—Ä–∞–π–∫–∞–º –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è–º
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ = —É–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø—Ä–µ–º–∏—è
"""
    
    return message
