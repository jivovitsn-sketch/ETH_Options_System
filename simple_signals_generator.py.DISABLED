#!/usr/bin/env python3
"""–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –°–ò–ì–ù–ê–õ–û–í"""

import sqlite3
import pandas as pd
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

def simple_signal_generator():
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ô –í–ï–†–°–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    
    symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'DOGE', 'MNT']
    
    for symbol in symbols:
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/futures_data.db')
            price_df = pd.read_sql_query(
                "SELECT last_price FROM spot_data WHERE symbol = ? ORDER BY timestamp DESC LIMIT 1", 
                conn, params=(f"{symbol}USDT",)
            )
            conn.close()
            
            if not price_df.empty:
                price = float(price_df.iloc[0]['last_price'])
                print(f"‚úÖ {symbol}: ${price:.2f} - –î–ê–ù–ù–´–ï –î–û–°–¢–£–ü–ù–´")
            else:
                print(f"‚ùå {symbol}: –ù–ï–¢ –î–ê–ù–ù–´–•")
                
        except Exception as e:
            print(f"‚ùå {symbol}: –û–®–ò–ë–ö–ê - {e}")

if __name__ == "__main__":
    simple_signal_generator()
