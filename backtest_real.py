#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REAL BACKTEST - –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ signal_history.db
–ë–ï–ó –ò–ú–ò–¢–ê–¶–ò–ô!
"""

import sqlite3
import json
from datetime import datetime
from typing import List, Dict

class RealBacktest:
    """–†–µ–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_path = './data/signal_history.db'
    
    def load_signals(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                timestamp,
                asset,
                signal_type,
                confidence,
                spot_price,
                data_snapshot_json
            FROM signal_history
            ORDER BY timestamp ASC
        ''')
        
        rows = cursor.fetchall()
        conn.close()
        
        signals = []
        for row in rows:
            try:
                data_snapshot = json.loads(row[5])
                signals.append({
                    'timestamp': row[0],
                    'datetime': datetime.fromtimestamp(row[0]),
                    'asset': row[1],
                    'signal_type': row[2],
                    'confidence': row[3],
                    'entry_price': row[4],
                    'data': data_snapshot
                })
            except:
                pass
        
        return signals
    
    def backtest(self, signals: List[Dict]) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç"""
        
        if not signals:
            return {'error': 'No signals to backtest'}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–∞–º
        by_asset = {}
        for sig in signals:
            asset = sig['asset']
            if asset not in by_asset:
                by_asset[asset] = []
            by_asset[asset].append(sig)
        
        results = {
            'total_signals': len(signals),
            'by_asset': {},
            'summary': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤—É
        for asset, asset_signals in by_asset.items():
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏ —Ç–µ–∫—É—â—É—é
            trades = []
            
            for i, sig in enumerate(asset_signals):
                if sig['signal_type'] in ['BULLISH', 'BEARISH']:
                    
                    entry_price = sig['entry_price']
                    
                    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    if i + 1 < len(asset_signals):
                        exit_price = asset_signals[i + 1]['entry_price']
                        exit_time = asset_signals[i + 1]['datetime']
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        exit_price = entry_price * 1.02  # –£—Å–ª–æ–≤–Ω—ã–π –≤—ã—Ö–æ–¥
                        exit_time = datetime.now()
                    
                    # –†–∞—Å—á—ë—Ç PnL
                    if sig['signal_type'] == 'BULLISH':
                        pnl_pct = ((exit_price - entry_price) / entry_price) * 100
                    else:  # BEARISH
                        pnl_pct = ((entry_price - exit_price) / entry_price) * 100
                    
                    trades.append({
                        'entry_time': sig['datetime'],
                        'exit_time': exit_time,
                        'signal': sig['signal_type'],
                        'confidence': sig['confidence'],
                        'entry_price': entry_price,
                        'exit_price': exit_price,
                        'pnl_pct': pnl_pct,
                        'win': pnl_pct > 0
                    })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤—É
            if trades:
                wins = [t for t in trades if t['win']]
                losses = [t for t in trades if not t['win']]
                
                avg_win = sum(t['pnl_pct'] for t in wins) / len(wins) if wins else 0
                avg_loss = sum(t['pnl_pct'] for t in losses) / len(losses) if losses else 0
                
                results['by_asset'][asset] = {
                    'total_trades': len(trades),
                    'wins': len(wins),
                    'losses': len(losses),
                    'win_rate': len(wins) / len(trades) * 100 if trades else 0,
                    'avg_win': avg_win,
                    'avg_loss': avg_loss,
                    'total_pnl': sum(t['pnl_pct'] for t in trades),
                    'trades': trades
                }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_trades = []
        for asset_data in results['by_asset'].values():
            all_trades.extend(asset_data['trades'])
        
        if all_trades:
            wins = [t for t in all_trades if t['win']]
            losses = [t for t in all_trades if not t['win']]
            
            results['summary'] = {
                'total_trades': len(all_trades),
                'wins': len(wins),
                'losses': len(losses),
                'win_rate': len(wins) / len(all_trades) * 100,
                'avg_win': sum(t['pnl_pct'] for t in wins) / len(wins) if wins else 0,
                'avg_loss': sum(t['pnl_pct'] for t in losses) / len(losses) if losses else 0,
                'total_pnl': sum(t['pnl_pct'] for t in all_trades),
                'profit_factor': abs(sum(t['pnl_pct'] for t in wins) / sum(t['pnl_pct'] for t in losses)) if losses and sum(t['pnl_pct'] for t in losses) != 0 else 0
            }
        
        return results


if __name__ == '__main__':
    print("=" * 80)
    print("üìä –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢ –ù–ê –°–û–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    bt = RealBacktest()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    signals = bt.load_signals()
    
    print(f"\nüìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    
    if not signals:
        print("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –ë–≠–ö–¢–ï–°–¢–ê!")
        print("–ó–∞–ø—É—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤/–¥–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        exit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
    first = signals[0]['datetime']
    last = signals[-1]['datetime']
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {first} ‚Üí {last}")
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(last - first).total_seconds() / 3600:.1f} —á–∞—Å–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    results = bt.backtest(signals)
    
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê")
    print("=" * 80)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if 'summary' in results and results['summary']:
        summary = results['summary']
        
        print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_trades']}")
        print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {summary['wins']} ({summary['win_rate']:.1f}%)")
        print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {summary['losses']}")
        print(f"  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {summary['avg_win']:.2f}%")
        print(f"  –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {summary['avg_loss']:.2f}%")
        print(f"  –û–±—â–∏–π PnL: {summary['total_pnl']:.2f}%")
        print(f"  Profit Factor: {summary['profit_factor']:.2f}")
    
    # –ü–æ –∞–∫—Ç–∏–≤–∞–º
    print(f"\nüìä –ü–û –ê–ö–¢–ò–í–ê–ú:")
    for asset, data in results.get('by_asset', {}).items():
        print(f"\n  {asset}:")
        print(f"    –°–¥–µ–ª–æ–∫: {data['total_trades']}")
        print(f"    Win Rate: {data['win_rate']:.1f}%")
        print(f"    Total PnL: {data['total_pnl']:.2f}%")
    
    print("\n" + "=" * 80)
    print("‚úÖ –ë–≠–ö–¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 80)
