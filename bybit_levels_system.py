#!/usr/bin/env python3
import requests
import json
import hmac
import hashlib
import time
from datetime import datetime

class BybitLevelsSystem:
    def __init__(self):
        with open('config/telegram.json') as f:
            config = json.load(f)
        
        # –¢–≤–æ–∏ Bybit API –¥–∞–Ω–Ω—ã–µ
        if 'bybit_api' in config:
            self.api_key = config['bybit_api']['key']
            self.api_secret = config['bybit_api']['secret']
            self.use_auth = True
        else:
            self.use_auth = False
            
        self.base_url = "https://api.bybit.com"
    
    def get_bybit_price(self, symbol):
        """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å Bybit"""
        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {
                'category': 'spot',
                'symbol': symbol
            }
            
            if self.use_auth:
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏
                timestamp = str(int(time.time() * 1000))
                params['api_key'] = self.api_key
                params['timestamp'] = timestamp
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞)
                query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
                signature = hmac.new(
                    self.api_secret.encode('utf-8'),
                    query_string.encode('utf-8'),
                    hashlib.sha256
                ).hexdigest()
                params['sign'] = signature
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data['retCode'] == 0:
                    return float(data['result']['list'][0]['lastPrice'])
            
        except Exception as e:
            print(f"Bybit API error: {e}")
        
        return None
    
    def get_bybit_options_data(self, symbol):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å Bybit"""
        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {
                'category': 'option',
                'baseCoin': symbol
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data['retCode'] == 0:
                    return data['result']['list']
                    
        except Exception as e:
            print(f"Options data error: {e}")
        
        return []
    
    def calculate_smart_levels(self):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Bybit –¥–∞–Ω–Ω—ã—Ö"""
        
        symbols = {
            'BTC': 'BTCUSDT',
            'ETH': 'ETHUSDT',
            'SOL': 'SOLUSDT'
        }
        
        levels = {}
        
        for asset, symbol in symbols.items():
            price = self.get_bybit_price(symbol)
            
            if not price:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {asset} —Å Bybit")
                continue
            
            # –£–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if asset == 'BTC':
                step = 1000
                resistance_pct = 1.02
                support_pct = 0.98
            elif asset == 'ETH':
                step = 50
                resistance_pct = 1.025
                support_pct = 0.975
            else:
                step = 5
                resistance_pct = 1.03
                support_pct = 0.97
            
            levels[asset] = {
                'current': price,
                'resistance': round(price * resistance_pct / step) * step,
                'support': round(price * support_pct / step) * step,
                'strong_resistance': round(price * 1.05 / step) * step,
                'strong_support': round(price * 0.95 / step) * step,
                'options_available': len(self.get_bybit_options_data(asset)) > 0
            }
        
        return levels
    
    def check_signals(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Bybit –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"=== BYBIT LEVELS CHECK: {datetime.now().strftime('%H:%M:%S')} ===")
        print(f"API Mode: {'Authenticated' if self.use_auth else 'Public'}")
        
        levels = self.calculate_smart_levels()
        signals = []
        
        for asset, data in levels.items():
            price = data['current']
            
            print(f"\n{asset}: ${price:,.2f}")
            print(f"  Support: ${data['support']:,.0f} | Resistance: ${data['resistance']:,.0f}")
            print(f"  Options Available: {'‚úÖ' if data['options_available'] else '‚ùå'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
            if price >= data['strong_resistance']:
                signals.append({
                    'asset': asset,
                    'action': 'STRONG BUY',
                    'reason': f"–ü—Ä–æ–±–æ–π —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ${data['strong_resistance']:,.0f}",
                    'price': price,
                    'options_ready': data['options_available']
                })
            elif price <= data['strong_support']:
                signals.append({
                    'asset': asset,
                    'action': 'STRONG SELL', 
                    'reason': f"–ü—Ä–æ–±–æ–π —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${data['strong_support']:,.0f}",
                    'price': price,
                    'options_ready': data['options_available']
                })
            else:
                print(f"  -> –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        
        if signals:
            print(f"\nüö® BYBIT SIGNALS:")
            for signal in signals:
                status = "TRADEABLE" if signal['options_ready'] else "SPOT ONLY"
                print(f"  {signal['asset']}: {signal['action']} - {status}")
        else:
            print(f"\n‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö")
        
        return signals

if __name__ == "__main__":
    bybit_system = BybitLevelsSystem()
    bybit_system.check_signals()
