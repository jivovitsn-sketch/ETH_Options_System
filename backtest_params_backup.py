#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BACKTEST PARAMETERS - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ
Stage 1.4.4
"""

BACKTEST_PARAMETERS = {
    # ===== –í–ï–°–ê –ì–†–£–ü–ü =====
    'futures_weight': {
        'min': 0.20,
        'max': 0.50,
        'step': 0.05,
        'default': 0.35,
        'description': '–í–µ—Å —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    'options_weight': {
        'min': 0.30,
        'max': 0.60,
        'step': 0.05,
        'default': 0.45,
        'description': '–í–µ—Å –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    'timing_weight': {
        'min': 0.10,
        'max': 0.40,
        'step': 0.05,
        'default': 0.20,
        'description': '–í–µ—Å —Ç–∞–π–º–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'
    },
    
    # ===== –í–ï–°–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í: –§–¨–Æ–ß–ï–†–°–ù–´–ï =====
    'funding_weight': {
        'min': 0.20,
        'max': 0.80,
        'step': 0.10,
        'default': 0.40,
        'group': 'futures'
    },
    'liquidations_weight': {
        'min': 0.20,
        'max': 0.80,
        'step': 0.10,
        'default': 0.60,
        'group': 'futures'
    },
    
    # ===== –í–ï–°–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í: –û–ü–¶–ò–û–ù–ù–´–ï =====
    'max_pain_weight': {
        'min': 0.05,
        'max': 0.30,
        'step': 0.05,
        'default': 0.20,
        'group': 'options'
    },
    'gex_weight': {
        'min': 0.05,
        'max': 0.30,
        'step': 0.05,
        'default': 0.20,
        'group': 'options'
    },
    'pcr_weight': {
        'min': 0.05,
        'max': 0.30,
        'step': 0.05,
        'default': 0.20,
        'group': 'options'
    },
    'vanna_weight': {
        'min': 0.10,
        'max': 0.40,
        'step': 0.05,
        'default': 0.20,
        'group': 'options'
    },
    'iv_rank_weight': {
        'min': 0.10,
        'max': 0.40,
        'step': 0.05,
        'default': 0.20,
        'group': 'options'
    },
    
    # ===== –í–ï–°–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í: –¢–ê–ô–ú–ò–ù–ì =====
    'pcr_rsi_weight': {
        'min': 0.20,
        'max': 0.60,
        'step': 0.10,
        'default': 0.50,
        'group': 'timing'
    },
    'gex_rsi_weight': {
        'min': 0.20,
        'max': 0.60,
        'step': 0.10,
        'default': 0.50,
        'group': 'timing'
    },
    
    # ===== –ü–û–†–û–ì–ò =====
    'min_confidence': {
        'min': 0.50,
        'max': 0.80,
        'step': 0.05,
        'default': 0.60,
        'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞'
    },
    'strong_threshold': {
        'min': 0.70,
        'max': 0.95,
        'step': 0.05,
        'default': 0.75,
        'description': '–ü–æ—Ä–æ–≥ –¥–ª—è STRONG —Å–∏–≥–Ω–∞–ª–∞'
    },
    
    # ===== –§–ò–õ–¨–¢–†–´ =====
    'min_data_sources': {
        'min': 2,
        'max': 7,
        'step': 1,
        'default': 5,
        'description': '–ú–∏–Ω–∏–º—É–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞'
    }
}

def count_combinations():
    """–ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    total = 1
    for param, settings in BACKTEST_PARAMETERS.items():
        if 'min' in settings and 'max' in settings and 'step' in settings:
            count = int((settings['max'] - settings['min']) / settings['step']) + 1
            total *= count
    return total

def get_default_config():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config = {
        'futures_weight': 0.35,
        'options_weight': 0.45,
        'timing_weight': 0.20,
        'futures': {},
        'options': {},
        'timing': {},
        'min_confidence': 0.60,
        'strong_threshold': 0.75,
        'min_data_sources': 5,
        'require_futures_confirm': False,
        'require_options_confirm': True,
        'min_data_quality': 'ACCEPTABLE'
    }
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    for param, settings in BACKTEST_PARAMETERS.items():
        if 'group' in settings:
            group = settings['group']
            if group not in config:
                config[group] = {}
            config[group][param] = settings['default']
    
    return config

def generate_random_config():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import random
    
    config = get_default_config()
    
    for param, settings in BACKTEST_PARAMETERS.items():
        if 'min' in settings and 'max' in settings and 'step' in settings:
            min_val = settings['min']
            max_val = settings['max']
            step = settings['step']
            
            steps_count = int((max_val - min_val) / step)
            random_steps = random.randint(0, steps_count)
            value = min_val + random_steps * step
            
            if 'group' in settings:
                group = settings['group']
                config[group][param] = value
            else:
                config[param] = value
    
    return config

if __name__ == '__main__':
    import json
    
    print("=" * 60)
    print("üîß BACKTEST PARAMETERS")
    print("=" * 60)
    print()
    print(f"Total combinations: {count_combinations():,}")
    print()
    print("Default config:")
    print(json.dumps(get_default_config(), indent=2))
    print()
    print("=" * 60)
