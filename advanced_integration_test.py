#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""

import json
import logging
from data_integrator import DataIntegrator
from signal_analyzer import SignalAnalyzer

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(name)s - %(levelname)s - %(message)s')

print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò STAGE 1.4")
print("=" * 60)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
try:
    with open('signal_config.json', 'r') as f:
        config = json.load(f)
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except:
    config = None
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
integrator = DataIntegrator()
analyzer = SignalAnalyzer(config)

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
assets = integrator.get_available_assets()
print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {assets}")

print(f"\nüîç –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í –î–õ–Ø –í–°–ï–• –ê–ö–¢–ò–í–û–í:")
print("-" * 50)

signals_summary = []

for asset in assets:
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = integrator.get_all_data(asset)
        quality = data['data_quality']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
        if quality['quality_score'] < 0.2:
            continue
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        signal = analyzer.analyze(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è summary
        signals_summary.append({
            'asset': asset,
            'signal': signal['signal_type'],
            'confidence': signal['confidence'],
            'quality': quality['quality_score']
        })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_icon = "üü¢" if "BULLISH" in signal['signal_type'] else "üî¥" if "BEARISH" in signal['signal_type'] else "‚ö™"
        print(f"{status_icon} {asset:6} - {signal['signal_type']:15} (conf: {signal['confidence']:.2f}, quality: {quality['quality_score']:.2f})")
        
        # –î–µ—Ç–∞–ª–∏ –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if signal['confidence'] > 0.7:
            print(f"     üìù {signal['reasoning']}")
            
    except Exception as e:
        print(f"‚ùå {asset:6} - –û—à–∏–±–∫–∞: {e}")

# –°–≤–æ–¥–∫–∞
print(f"\nüìà –°–í–û–î–ö–ê –°–ò–ì–ù–ê–õ–û–í:")
print("-" * 50)

bullish_count = len([s for s in signals_summary if "BULLISH" in s['signal']])
bearish_count = len([s for s in signals_summary if "BEARISH" in s['signal']])
strong_signals = [s for s in signals_summary if s['confidence'] > 0.7]

print(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_summary)}")
print(f"üü¢ –ë—ã—á—å–∏—Ö: {bullish_count}")
print(f"üî¥ –ú–µ–¥–≤–µ–∂—å–∏—Ö: {bearish_count}")
print(f"üéØ –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(strong_signals)}")

if strong_signals:
    print(f"\nüí™ –°–ò–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
    for signal in strong_signals:
        print(f"   ‚≠ê {signal['asset']} - {signal['signal']} (conf: {signal['confidence']:.2f})")

print(f"\nüéâ STAGE 1.4 –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê!")
print("   DataIntegrator ‚úÖ | SignalAnalyzer ‚úÖ | –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚úÖ")
