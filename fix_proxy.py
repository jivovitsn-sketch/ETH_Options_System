import requests
import os
from dotenv import load_dotenv

load_dotenv()

def test_proxy_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    proxy_url = os.getenv('TELEGRAM_PROXY_URL')
    proxy_user = os.getenv('TELEGRAM_PROXY_USERNAME') 
    proxy_pass = os.getenv('TELEGRAM_PROXY_PASSWORD')
    
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ö–°–ò:")
    print(f"URL: {proxy_url}")
    print(f"Username: {proxy_user}")
    print(f"Password: {proxy_pass}")
    
    if not proxy_url:
        print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —Å—Ç—Ä–æ–∫—É —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        if proxy_user and proxy_pass:
            proxy_with_auth = f"http://{proxy_user}:{proxy_pass}@{proxy_url.split('//')[1]}"
        else:
            proxy_with_auth = proxy_url
            
        proxies = {
            'http': proxy_with_auth,
            'https': proxy_with_auth
        }
        
        print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_with_auth.split('@')[1] if '@' in proxy_with_auth else proxy_with_auth}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        test_url = "https://api.telegram.org"
        response = requests.get(test_url, proxies=proxies, timeout=15)
        
        if response.status_code == 200:
            print("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
        return False

def update_telegram_sender():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    
    with open('advanced_signals_generator.py', 'r') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_telegram_message
    new_telegram_function = '''
    def send_telegram_message(self, message, is_vip=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_VIP_CHAT_ID' if is_vip else 'TELEGRAM_ADMIN_CHAT_ID')
            proxy_url = os.getenv('TELEGRAM_PROXY_URL')
            proxy_user = os.getenv('TELEGRAM_PROXY_USERNAME')
            proxy_pass = os.getenv('TELEGRAM_PROXY_PASSWORD')
            
            if not bot_token or not chat_id:
                logger.warning("‚ùå Telegram credentials not set")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxies = None
            if proxy_url:
                if proxy_user and proxy_pass:
                    proxy_with_auth = f"http://{proxy_user}:{proxy_pass}@{proxy_url.split('//')[1]}"
                else:
                    proxy_with_auth = proxy_url
                proxies = {
                    'http': proxy_with_auth,
                    'https': proxy_with_auth
                }
                logger.info(f"üîó Using proxy: {proxy_url}")
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å –ø—Ä–æ–∫—Å–∏
            response = requests.post(url, json=payload, proxies=proxies, timeout=20)
            if response.status_code == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ fallback
            try:
                if proxies:
                    logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                    response = requests.post(url, json=payload, timeout=20)
                    if response.status_code == 200:
                        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {response.text}")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ fallback: {e2}")
'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é
    import re
    old_pattern = r'def send_telegram_message\([^)]*\):.*?except Exception as e:\s*logger.error\(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}"\)'
    new_content = re.sub(old_pattern, new_telegram_function, content, flags=re.DOTALL)
    
    with open('advanced_signals_generator.py', 'w') as f:
        f.write(new_content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏")

if __name__ == "__main__":
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ö–°–ò –î–õ–Ø TELEGRAM")
    print("=" * 50)
    
    if test_proxy_connection():
        print("\n‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥...")
        update_telegram_sender()
    else:
        print("\nüö® –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
        update_telegram_sender()
