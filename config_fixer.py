#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import json
import os

def fix_signal_config():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å signal_config.json"""
    default_config = {
        "futures_weight": 0.35,
        "options_weight": 0.45,
        "timing_weight": 0.20,
        "min_confidence": 0.60,
        "strong_threshold": 0.75,
        "min_data_sources": 2,
        "pcr_bullish_threshold": 0.8,
        "pcr_bearish_threshold": 1.2,
        "max_pain_threshold": 0.02,
        "vanna_threshold": 0
    }
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        if os.path.exists('signal_config.json'):
            with open('signal_config.json', 'r') as f:
                existing_config = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            updated_config = {**default_config, **existing_config}
            
            with open('signal_config.json', 'w') as f:
                json.dump(updated_config, f, indent=4)
            
            print("‚úÖ signal_config.json –æ–±–Ω–æ–≤–ª–µ–Ω")
            return updated_config
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open('signal_config.json', 'w') as f:
                json.dump(default_config, f, indent=4)
            print("‚úÖ signal_config.json —Å–æ–∑–¥–∞–Ω")
            return default_config
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è signal_config.json: {e}")
        return None

def fix_backtest_config():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å backtest_config.json"""
    default_config = {
        "test_period_days": 30,
        "assets": ["ETH", "BTC", "SOL"],
        "initial_balance": 10000,
        "position_size": 0.1,
        "commission": 0.001,
        "risk_free_rate": 0.02
    }
    
    try:
        if os.path.exists('backtest_config.json'):
            with open('backtest_config.json', 'r') as f:
                existing_config = json.load(f)
            
            updated_config = {**default_config, **existing_config}
            
            with open('backtest_config.json', 'w') as f:
                json.dump(updated_config, f, indent=4)
            
            print("‚úÖ backtest_config.json –æ–±–Ω–æ–≤–ª–µ–Ω")
            return updated_config
        else:
            with open('backtest_config.json', 'w') as f:
                json.dump(default_config, f, indent=4)
            print("‚úÖ backtest_config.json —Å–æ–∑–¥–∞–Ω")
            return default_config
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è backtest_config.json: {e}")
        return None

def main():
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–û–í")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    signal_config = fix_signal_config()
    backtest_config = fix_backtest_config()
    
    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    if signal_config:
        print(f"   ‚úÖ signal_config: {len(signal_config)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    else:
        print("   ‚ùå signal_config: –æ—à–∏–±–∫–∞")
        
    if backtest_config:
        print(f"   ‚úÖ backtest_config: {len(backtest_config)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    else:
        print("   ‚ùå backtest_config: –æ—à–∏–±–∫–∞")
    
    if signal_config and backtest_config:
        print(f"\nüéâ –í–°–ï –ö–û–ù–§–ò–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("   –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞")
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ù–§–ò–ì–ê–ú–ò")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")

if __name__ == "__main__":
    main()
