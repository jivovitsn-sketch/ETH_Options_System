#!/usr/bin/env python3
"""
Data Integrator - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional

class DataIntegrator:
    def __init__(self):
        self.logger = logging.getLogger('DataIntegrator')
        self.data_dirs = {
            'funding': 'data/funding_rate',
            'liquidations': 'data/liquidations', 
            'futures': 'data/futures_oi',
            'pcr': 'data/pcr',
            'oi': 'data/oi',
            'max_pain': 'data/max_pain',
            'gex': 'data/gamma_exposure',
            'vanna': 'data/vanna',
            'iv_rank': 'data/iv_rank',
            'volatility': 'data/volatility_greeks'
        }
    
    def _load_json_data(self, directory: str, asset: str, data_type: str) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö"""
        try:
            file_path = f"{directory}/{asset}_{data_type}.json"
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    return json.load(f)
        except Exception as e:
            self.logger.warning(f"Error loading {data_type} data for {asset}: {e}")
        return {}
    
    def get_futures_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['futures'], asset, 'futures')
    
    def get_funding_rate(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['funding'], asset, 'funding')
    
    def get_liquidations(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['liquidations'], asset, 'liquidations')
    
    def get_pcr_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['pcr'], asset, 'pcr')
    
    def get_oi_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['oi'], asset, 'oi')
    
    def get_max_pain(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['max_pain'], asset, 'max_pain')
    
    def get_gamma_exposure(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['gex'], asset, 'gamma_exposure')
    
    def get_vanna_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['vanna'], asset, 'vanna')
    
    def get_iv_rank_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['iv_rank'], asset, 'iv_rank')
    
    def get_volatility_data(self, asset: str) -> Dict[str, Any]:
        return self._load_json_data(self.data_dirs['volatility'], asset, 'volatility_greeks')
    
    def _calculate_data_quality(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏!)"""
        available_sources = 0
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–∞-–ø–æ–ª—è –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞
        meta_fields = ['timestamp', 'asset', 'data_quality']
        data_fields = [k for k in data.keys() if k not in meta_fields]
        total_sources = len(data_fields)
        
        for key in data_fields:
            if data[key] and isinstance(data[key], dict) and len(data[key]) > 0:
                available_sources += 1
        
        quality_score = available_sources / total_sources if total_sources > 0 else 0
        
        return {
            'available_sources': available_sources,
            'total_sources': total_sources,
            'quality_score': round(quality_score, 2),
            'timestamp': datetime.now().isoformat()
        }
    
    def get_all_data(self, asset: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        self.logger.info(f"Integrating data for {asset}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            # –§—å—é—á–µ—Ä—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'futures': self.get_futures_data(asset),
            'funding': self.get_funding_rate(asset),
            'liquidations': self.get_liquidations(asset),
            
            # –û–ø—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'pcr': self.get_pcr_data(asset),
            'oi': self.get_oi_data(asset),
            'max_pain': self.get_max_pain(asset),
            'gex': self.get_gamma_exposure(asset),
            'vanna': self.get_vanna_data(asset),
            'iv_rank': self.get_iv_rank_data(asset),
            'volatility': self.get_volatility_data(asset),
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'timestamp': datetime.now().isoformat(),
            'asset': asset
        }
        
        # –¢–ï–ü–ï–†–¨ –≤—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏!)
        data['data_quality'] = self._calculate_data_quality(data)
        
        return data

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    integrator = DataIntegrator()
    
    # –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ ETH
    test_data = integrator.get_all_data('ETH')
    print("‚úÖ DataIntegrator —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {test_data['data_quality']}")
    print(f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {test_data['data_quality']['available_sources']}/{test_data['data_quality']['total_sources']}")
